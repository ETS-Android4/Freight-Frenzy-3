Index: TeamCode/src/main/java/org/firstinspires/ftc/teamcode/SensorBNO055IMU.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/* Copyright (c) 2017 FIRST. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted (subject to the limitations in the disclaimer below) provided that\n * the following conditions are met:\n *\n * Redistributions of source code must retain the above copyright notice, this list\n * of conditions and the following disclaimer.\n *\n * Redistributions in binary form must reproduce the above copyright notice, this\n * list of conditions and the following disclaimer in the documentation and/or\n * other materials provided with the distribution.\n *\n * Neither the name of FIRST nor the names of its contributors may be used to endorse or\n * promote products derived from this software without specific prior written permission.\n *\n * NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS\n * LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,\n * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE\n * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\npackage org.firstinspires.ftc.teamcode;\n\nimport com.qualcomm.hardware.bosch.BNO055IMU;\nimport com.qualcomm.hardware.bosch.JustLoggingAccelerationIntegrator;\nimport com.qualcomm.robotcore.eventloop.opmode.Disabled;\nimport com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;\nimport com.qualcomm.robotcore.eventloop.opmode.TeleOp;\n\nimport org.firstinspires.ftc.robotcore.external.Func;\nimport org.firstinspires.ftc.robotcore.external.navigation.Acceleration;\nimport org.firstinspires.ftc.robotcore.external.navigation.AngleUnit;\nimport org.firstinspires.ftc.robotcore.external.navigation.AxesOrder;\nimport org.firstinspires.ftc.robotcore.external.navigation.AxesReference;\nimport org.firstinspires.ftc.robotcore.external.navigation.Orientation;\nimport org.firstinspires.ftc.robotcore.external.navigation.Position;\nimport org.firstinspires.ftc.robotcore.external.navigation.Velocity;\n\nimport java.util.Locale;\n\n/**\n * {@link SensorBNO055IMU} gives a short demo on how to use the BNO055 Inertial Motion Unit (IMU) from AdaFruit.\n *\n * Use Android Studio to Copy this Class, and Paste it into your team's code folder with a new name.\n * Remove or comment out the @Disabled line to add this opmode to the Driver Station OpMode list\n *\n * @see <a href=\"http://www.adafruit.com/products/2472\">Adafruit IMU</a>\n */\n@TeleOp(name = \"Sensor: BNO055 IMU\", group = \"Sensor\")\n@Disabled                            // Comment this out to add to the opmode list\npublic class SensorBNO055IMU extends LinearOpMode\n    {\n    //----------------------------------------------------------------------------------------------\n    // State\n    //----------------------------------------------------------------------------------------------\n\n    // The IMU sensor object\n    BNO055IMU imu;\n\n    // State used for updating telemetry\n    Orientation angles;\n    Acceleration gravity;\n\n    //----------------------------------------------------------------------------------------------\n    // Main logic\n    //----------------------------------------------------------------------------------------------\n\n    @Override public void runOpMode() {\n\n        // Set up the parameters with which we will use our IMU. Note that integration\n        // algorithm here just reports accelerations to the logcat log; it doesn't actually\n        // provide positional information.\n        BNO055IMU.Parameters parameters = new BNO055IMU.Parameters();\n        parameters.angleUnit           = BNO055IMU.AngleUnit.DEGREES;\n        parameters.accelUnit           = BNO055IMU.AccelUnit.METERS_PERSEC_PERSEC;\n        parameters.calibrationDataFile = \"BNO055IMUCalibration.json\"; // see the calibration sample opmode\n        parameters.loggingEnabled      = true;\n        parameters.loggingTag          = \"IMU\";\n        parameters.accelerationIntegrationAlgorithm = new JustLoggingAccelerationIntegrator();\n\n        // Retrieve and initialize the IMU. We expect the IMU to be attached to an I2C port\n        // on a Core Device Interface Module, configured to be a sensor of type \"AdaFruit IMU\",\n        // and named \"imu\".\n        imu = hardwareMap.get(BNO055IMU.class, \"imu\");\n        imu.initialize(parameters);\n\n        // Set up our telemetry dashboard\n        composeTelemetry();\n\n        // Wait until we're told to go\n        waitForStart();\n\n        // Start the logging of measured acceleration\n        imu.startAccelerationIntegration(new Position(), new Velocity(), 1000);\n\n        // Loop and update the dashboard\n        while (opModeIsActive()) {\n            telemetry.update();\n        }\n    }\n\n    //----------------------------------------------------------------------------------------------\n    // Telemetry Configuration\n    //----------------------------------------------------------------------------------------------\n\n    void composeTelemetry() {\n\n        // At the beginning of each telemetry update, grab a bunch of data\n        // from the IMU that we will then display in separate lines.\n        telemetry.addAction(new Runnable() { @Override public void run()\n                {\n                // Acquiring the angles is relatively expensive; we don't want\n                // to do that in each of the three items that need that info, as that's\n                // three times the necessary expense.\n                angles   = imu.getAngularOrientation(AxesReference.INTRINSIC, AxesOrder.ZYX, AngleUnit.DEGREES);\n                gravity  = imu.getGravity();\n                }\n            });\n\n        telemetry.addLine()\n            .addData(\"status\", new Func<String>() {\n                @Override public String value() {\n                    return imu.getSystemStatus().toShortString();\n                    }\n                })\n            .addData(\"calib\", new Func<String>() {\n                @Override public String value() {\n                    return imu.getCalibrationStatus().toString();\n                    }\n                });\n\n        telemetry.addLine()\n            .addData(\"heading\", new Func<String>() {\n                @Override public String value() {\n                    return formatAngle(angles.angleUnit, angles.firstAngle);\n                    }\n                })\n            .addData(\"roll\", new Func<String>() {\n                @Override public String value() {\n                    return formatAngle(angles.angleUnit, angles.secondAngle);\n                    }\n                })\n            .addData(\"pitch\", new Func<String>() {\n                @Override public String value() {\n                    return formatAngle(angles.angleUnit, angles.thirdAngle);\n                    }\n                });\n\n        telemetry.addLine()\n            .addData(\"grvty\", new Func<String>() {\n                @Override public String value() {\n                    return gravity.toString();\n                    }\n                })\n            .addData(\"mag\", new Func<String>() {\n                @Override public String value() {\n                    return String.format(Locale.getDefault(), \"%.3f\",\n                            Math.sqrt(gravity.xAccel*gravity.xAccel\n                                    + gravity.yAccel*gravity.yAccel\n                                    + gravity.zAccel*gravity.zAccel));\n                    }\n                });\n    }\n\n    //----------------------------------------------------------------------------------------------\n    // Formatting\n    //----------------------------------------------------------------------------------------------\n\n    String formatAngle(AngleUnit angleUnit, double angle) {\n        return formatDegrees(AngleUnit.DEGREES.fromUnit(angleUnit, angle));\n    }\n\n    String formatDegrees(double degrees){\n        return String.format(Locale.getDefault(), \"%.1f\", AngleUnit.DEGREES.normalize(degrees));\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TeamCode/src/main/java/org/firstinspires/ftc/teamcode/SensorBNO055IMU.java b/TeamCode/src/main/java/org/firstinspires/ftc/teamcode/SensorBNO055IMU.java
--- a/TeamCode/src/main/java/org/firstinspires/ftc/teamcode/SensorBNO055IMU.java	(revision f67043db5890d162d0d0c2763e1e67fecebe73d4)
+++ b/TeamCode/src/main/java/org/firstinspires/ftc/teamcode/SensorBNO055IMU.java	(date 1647115917783)
@@ -84,7 +84,7 @@
         parameters.calibrationDataFile = "BNO055IMUCalibration.json"; // see the calibration sample opmode
         parameters.loggingEnabled      = true;
         parameters.loggingTag          = "IMU";
-        parameters.accelerationIntegrationAlgorithm = new JustLoggingAccelerationIntegrator();
+        //parameters.accelerationIntegrationAlgorithm = new JustLoggingAccelerationIntegrator();
 
         // Retrieve and initialize the IMU. We expect the IMU to be attached to an I2C port
         // on a Core Device Interface Module, configured to be a sensor of type "AdaFruit IMU",
@@ -157,7 +157,7 @@
         telemetry.addLine()
             .addData("grvty", new Func<String>() {
                 @Override public String value() {
-                    return gravity.toString();
+                    return imu.getPosition().toString();
                     }
                 })
             .addData("mag", new Func<String>() {
